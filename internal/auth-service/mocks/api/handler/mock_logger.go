// Code generated by MockGen. DO NOT EDIT.
// Source: .\api\handler\logger.go
//
// Generated by this command:
//
//	mockgen -source .\api\handler\logger.go -destination .\mocks\api\handler\mock_logger.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// LoggingError mocks base method.
func (m *MockLogger) LoggingError(c *gin.Context, err error, errDescription string, logLevel zapcore.Level) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoggingError", c, err, errDescription, logLevel)
}

// LoggingError indicates an expected call of LoggingError.
func (mr *MockLoggerMockRecorder) LoggingError(c, err, errDescription, logLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingError", reflect.TypeOf((*MockLogger)(nil).LoggingError), c, err, errDescription, logLevel)
}
