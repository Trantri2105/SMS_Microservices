// Code generated by MockGen. DO NOT EDIT.
// Source: .\scope_repository.go
//
// Generated by this command:
//
//	mockgen -source .\scope_repository.go -destination ./mocks/mock_scope_repository.go
//

// Package mock_repository is a generated GoMock package.
package repository

import (
	model "VCS_SMS_Microservice/internal/auth-service/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScopeRepository is a mock of ScopeRepository interface.
type MockScopeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScopeRepositoryMockRecorder
	isgomock struct{}
}

// MockScopeRepositoryMockRecorder is the mock recorder for MockScopeRepository.
type MockScopeRepositoryMockRecorder struct {
	mock *MockScopeRepository
}

// NewMockScopeRepository creates a new mock instance.
func NewMockScopeRepository(ctrl *gomock.Controller) *MockScopeRepository {
	mock := &MockScopeRepository{ctrl: ctrl}
	mock.recorder = &MockScopeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeRepository) EXPECT() *MockScopeRepositoryMockRecorder {
	return m.recorder
}

// GetScopes mocks base method.
func (m *MockScopeRepository) GetScopes(ctx context.Context, scopeName, sortBy, sortOrder string, limit, offset int) ([]model.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopes", ctx, scopeName, sortBy, sortOrder, limit, offset)
	ret0, _ := ret[0].([]model.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopes indicates an expected call of GetScopes.
func (mr *MockScopeRepositoryMockRecorder) GetScopes(ctx, scopeName, sortBy, sortOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopes", reflect.TypeOf((*MockScopeRepository)(nil).GetScopes), ctx, scopeName, sortBy, sortOrder, limit, offset)
}

// GetScopesListByIDs mocks base method.
func (m *MockScopeRepository) GetScopesListByIDs(ctx context.Context, ids []string) ([]model.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopesListByIDs", ctx, ids)
	ret0, _ := ret[0].([]model.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopesListByIDs indicates an expected call of GetScopesListByIDs.
func (mr *MockScopeRepositoryMockRecorder) GetScopesListByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopesListByIDs", reflect.TypeOf((*MockScopeRepository)(nil).GetScopesListByIDs), ctx, ids)
}
