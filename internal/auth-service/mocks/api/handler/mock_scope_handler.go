// Code generated by MockGen. DO NOT EDIT.
// Source: .\api\handler\scope_handler.go
//
// Generated by this command:
//
//	mockgen -source .\api\handler\scope_handler.go -destination ./mocks/api/handler/mock_scope_handler.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockScopeHandler is a mock of ScopeHandler interface.
type MockScopeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockScopeHandlerMockRecorder
	isgomock struct{}
}

// MockScopeHandlerMockRecorder is the mock recorder for MockScopeHandler.
type MockScopeHandlerMockRecorder struct {
	mock *MockScopeHandler
}

// NewMockScopeHandler creates a new mock instance.
func NewMockScopeHandler(ctrl *gomock.Controller) *MockScopeHandler {
	mock := &MockScopeHandler{ctrl: ctrl}
	mock.recorder = &MockScopeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeHandler) EXPECT() *MockScopeHandlerMockRecorder {
	return m.recorder
}

// GetScopes mocks base method.
func (m *MockScopeHandler) GetScopes() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopes")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetScopes indicates an expected call of GetScopes.
func (mr *MockScopeHandlerMockRecorder) GetScopes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopes", reflect.TypeOf((*MockScopeHandler)(nil).GetScopes))
}
