// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\server_service.go
//
// Generated by this command:
//
//	mockgen -source .\service\server_service.go -destination ./mocks/service/mock_server_service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "VCS_SMS_Microservice/internal/server-service/model"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockServerService is a mock of ServerService interface.
type MockServerService struct {
	ctrl     *gomock.Controller
	recorder *MockServerServiceMockRecorder
	isgomock struct{}
}

// MockServerServiceMockRecorder is the mock recorder for MockServerService.
type MockServerServiceMockRecorder struct {
	mock *MockServerService
}

// NewMockServerService creates a new mock instance.
func NewMockServerService(ctrl *gomock.Controller) *MockServerService {
	mock := &MockServerService{ctrl: ctrl}
	mock.recorder = &MockServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerService) EXPECT() *MockServerServiceMockRecorder {
	return m.recorder
}

// CreateServer mocks base method.
func (m *MockServerService) CreateServer(ctx context.Context, server model.Server) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServerServiceMockRecorder) CreateServer(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockServerService)(nil).CreateServer), ctx, server)
}

// DeleteServer mocks base method.
func (m *MockServerService) DeleteServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockServerServiceMockRecorder) DeleteServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockServerService)(nil).DeleteServer), ctx, id)
}

// GetServerUptimePercentage mocks base method.
func (m *MockServerService) GetServerUptimePercentage(ctx context.Context, serverID string, startDate, endDate time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerUptimePercentage", ctx, serverID, startDate, endDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerUptimePercentage indicates an expected call of GetServerUptimePercentage.
func (mr *MockServerServiceMockRecorder) GetServerUptimePercentage(ctx, serverID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerUptimePercentage", reflect.TypeOf((*MockServerService)(nil).GetServerUptimePercentage), ctx, serverID, startDate, endDate)
}

// GetServers mocks base method.
func (m *MockServerService) GetServers(ctx context.Context, serverName, status, sortBy, sortOrder string, limit, offset int) ([]model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers", ctx, serverName, status, sortBy, sortOrder, limit, offset)
	ret0, _ := ret[0].([]model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers.
func (mr *MockServerServiceMockRecorder) GetServers(ctx, serverName, status, sortBy, sortOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockServerService)(nil).GetServers), ctx, serverName, status, sortBy, sortOrder, limit, offset)
}

// ImportServers mocks base method.
func (m *MockServerService) ImportServers(ctx context.Context, server []model.Server) ([]model.Server, []model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportServers", ctx, server)
	ret0, _ := ret[0].([]model.Server)
	ret1, _ := ret[1].([]model.Server)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportServers indicates an expected call of ImportServers.
func (mr *MockServerServiceMockRecorder) ImportServers(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportServers", reflect.TypeOf((*MockServerService)(nil).ImportServers), ctx, server)
}

// ReportServersInformation mocks base method.
func (m *MockServerService) ReportServersInformation(ctx context.Context, startDate, endDate time.Time, mail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportServersInformation", ctx, startDate, endDate, mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportServersInformation indicates an expected call of ReportServersInformation.
func (mr *MockServerServiceMockRecorder) ReportServersInformation(ctx, startDate, endDate, mail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportServersInformation", reflect.TypeOf((*MockServerService)(nil).ReportServersInformation), ctx, startDate, endDate, mail)
}

// UpdateServer mocks base method.
func (m *MockServerService) UpdateServer(ctx context.Context, updatedServerData model.Server) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", ctx, updatedServerData)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockServerServiceMockRecorder) UpdateServer(ctx, updatedServerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockServerService)(nil).UpdateServer), ctx, updatedServerData)
}
