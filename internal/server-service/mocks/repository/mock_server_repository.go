// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\server_repository.go
//
// Generated by this command:
//
//	mockgen -source .\repository\server_repository.go -destination ./mocks/repository/mock_server_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "VCS_SMS_Microservice/internal/server-service/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServerRepository is a mock of ServerRepository interface.
type MockServerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServerRepositoryMockRecorder
	isgomock struct{}
}

// MockServerRepositoryMockRecorder is the mock recorder for MockServerRepository.
type MockServerRepositoryMockRecorder struct {
	mock *MockServerRepository
}

// NewMockServerRepository creates a new mock instance.
func NewMockServerRepository(ctrl *gomock.Controller) *MockServerRepository {
	mock := &MockServerRepository{ctrl: ctrl}
	mock.recorder = &MockServerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerRepository) EXPECT() *MockServerRepositoryMockRecorder {
	return m.recorder
}

// CreateServer mocks base method.
func (m *MockServerRepository) CreateServer(ctx context.Context, server model.Server) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServerRepositoryMockRecorder) CreateServer(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockServerRepository)(nil).CreateServer), ctx, server)
}

// DeleteServerById mocks base method.
func (m *MockServerRepository) DeleteServerById(ctx context.Context, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerById", ctx, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerById indicates an expected call of DeleteServerById.
func (mr *MockServerRepositoryMockRecorder) DeleteServerById(ctx, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerById", reflect.TypeOf((*MockServerRepository)(nil).DeleteServerById), ctx, serverId)
}

// GetServerById mocks base method.
func (m *MockServerRepository) GetServerById(ctx context.Context, serverId string) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerById", ctx, serverId)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerById indicates an expected call of GetServerById.
func (mr *MockServerRepositoryMockRecorder) GetServerById(ctx, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerById", reflect.TypeOf((*MockServerRepository)(nil).GetServerById), ctx, serverId)
}

// GetServers mocks base method.
func (m *MockServerRepository) GetServers(ctx context.Context, serverName, status, sortBy, sortOrder string, limit, offset int) ([]model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers", ctx, serverName, status, sortBy, sortOrder, limit, offset)
	ret0, _ := ret[0].([]model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers.
func (mr *MockServerRepositoryMockRecorder) GetServers(ctx, serverName, status, sortBy, sortOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockServerRepository)(nil).GetServers), ctx, serverName, status, sortBy, sortOrder, limit, offset)
}

// ImportServers mocks base method.
func (m *MockServerRepository) ImportServers(ctx context.Context, servers []model.Server) ([]model.Server, []model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportServers", ctx, servers)
	ret0, _ := ret[0].([]model.Server)
	ret1, _ := ret[1].([]model.Server)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportServers indicates an expected call of ImportServers.
func (mr *MockServerRepositoryMockRecorder) ImportServers(ctx, servers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportServers", reflect.TypeOf((*MockServerRepository)(nil).ImportServers), ctx, servers)
}

// UpdateServer mocks base method.
func (m *MockServerRepository) UpdateServer(ctx context.Context, updatedData model.Server) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", ctx, updatedData)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockServerRepositoryMockRecorder) UpdateServer(ctx, updatedData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockServerRepository)(nil).UpdateServer), ctx, updatedData)
}
