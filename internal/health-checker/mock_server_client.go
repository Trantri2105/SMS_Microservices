// Code generated by MockGen. DO NOT EDIT.
// Source: .\server_client.go
//
// Generated by this command:
//
//	mockgen -source .\server_client.go -destination ./mock/mock_server_client.go
//

// Package mock_health_checker is a generated GoMock package.
package health_checker

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServerClient is a mock of ServerClient interface.
type MockServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerClientMockRecorder
	isgomock struct{}
}

// MockServerClientMockRecorder is the mock recorder for MockServerClient.
type MockServerClientMockRecorder struct {
	mock *MockServerClient
}

// NewMockServerClient creates a new mock instance.
func NewMockServerClient(ctrl *gomock.Controller) *MockServerClient {
	mock := &MockServerClient{ctrl: ctrl}
	mock.recorder = &MockServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerClient) EXPECT() *MockServerClientMockRecorder {
	return m.recorder
}

// GetServerHealthCheck mocks base method.
func (m *MockServerClient) GetServerHealthCheck(ctx context.Context, ipv4 string, port int, healthEndpoint string) (HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerHealthCheck", ctx, ipv4, port, healthEndpoint)
	ret0, _ := ret[0].(HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerHealthCheck indicates an expected call of GetServerHealthCheck.
func (mr *MockServerClientMockRecorder) GetServerHealthCheck(ctx, ipv4, port, healthEndpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerHealthCheck", reflect.TypeOf((*MockServerClient)(nil).GetServerHealthCheck), ctx, ipv4, port, healthEndpoint)
}
