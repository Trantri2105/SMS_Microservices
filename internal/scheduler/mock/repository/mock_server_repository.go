// Code generated by MockGen. DO NOT EDIT.
// Source: .\server_repository.go
//
// Generated by this command:
//
//	mockgen -source .\server_repository.go -destination ../mock/repository/mock_server_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "VCS_SMS_Microservice/internal/scheduler/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServerRepository is a mock of ServerRepository interface.
type MockServerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServerRepositoryMockRecorder
	isgomock struct{}
}

// MockServerRepositoryMockRecorder is the mock recorder for MockServerRepository.
type MockServerRepositoryMockRecorder struct {
	mock *MockServerRepository
}

// NewMockServerRepository creates a new mock instance.
func NewMockServerRepository(ctrl *gomock.Controller) *MockServerRepository {
	mock := &MockServerRepository{ctrl: ctrl}
	mock.recorder = &MockServerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerRepository) EXPECT() *MockServerRepositoryMockRecorder {
	return m.recorder
}

// CreateServer mocks base method.
func (m *MockServerRepository) CreateServer(ctx context.Context, server model.Server) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServerRepositoryMockRecorder) CreateServer(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockServerRepository)(nil).CreateServer), ctx, server)
}

// DeleteServerById mocks base method.
func (m *MockServerRepository) DeleteServerById(ctx context.Context, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerById", ctx, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerById indicates an expected call of DeleteServerById.
func (mr *MockServerRepositoryMockRecorder) DeleteServerById(ctx, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerById", reflect.TypeOf((*MockServerRepository)(nil).DeleteServerById), ctx, serverId)
}

// GetServersForHealthCheck mocks base method.
func (m *MockServerRepository) GetServersForHealthCheck(ctx context.Context) ([]model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServersForHealthCheck", ctx)
	ret0, _ := ret[0].([]model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServersForHealthCheck indicates an expected call of GetServersForHealthCheck.
func (mr *MockServerRepositoryMockRecorder) GetServersForHealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersForHealthCheck", reflect.TypeOf((*MockServerRepository)(nil).GetServersForHealthCheck), ctx)
}

// UpdateServer mocks base method.
func (m *MockServerRepository) UpdateServer(ctx context.Context, updatedData model.Server) (model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", ctx, updatedData)
	ret0, _ := ret[0].(model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockServerRepositoryMockRecorder) UpdateServer(ctx, updatedData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockServerRepository)(nil).UpdateServer), ctx, updatedData)
}

// UpdateServersNextHealthCheckByIds mocks base method.
func (m *MockServerRepository) UpdateServersNextHealthCheckByIds(ctx context.Context, serverIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServersNextHealthCheckByIds", ctx, serverIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServersNextHealthCheckByIds indicates an expected call of UpdateServersNextHealthCheckByIds.
func (mr *MockServerRepositoryMockRecorder) UpdateServersNextHealthCheckByIds(ctx, serverIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServersNextHealthCheckByIds", reflect.TypeOf((*MockServerRepository)(nil).UpdateServersNextHealthCheckByIds), ctx, serverIds)
}
