// Code generated by MockGen. DO NOT EDIT.
// Source: .\api\handler\user_handler.go
//
// Generated by this command:
//
//	mockgen -source .\api\handler\user_handler.go -destination ./mocks/api/handler/mock_user_handler.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
	isgomock struct{}
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// GetMe mocks base method.
func (m *MockUserHandler) GetMe() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetMe indicates an expected call of GetMe.
func (mr *MockUserHandlerMockRecorder) GetMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockUserHandler)(nil).GetMe))
}

// GetUserByID mocks base method.
func (m *MockUserHandler) GetUserByID() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserHandlerMockRecorder) GetUserByID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserHandler)(nil).GetUserByID))
}

// GetUsers mocks base method.
func (m *MockUserHandler) GetUsers() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserHandlerMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserHandler)(nil).GetUsers))
}

// UpdateUserInfo mocks base method.
func (m *MockUserHandler) UpdateUserInfo() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserHandlerMockRecorder) UpdateUserInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserHandler)(nil).UpdateUserInfo))
}

// UpdateUserPassword mocks base method.
func (m *MockUserHandler) UpdateUserPassword() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserHandlerMockRecorder) UpdateUserPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserHandler)(nil).UpdateUserPassword))
}

// UpdateUserRole mocks base method.
func (m *MockUserHandler) UpdateUserRole() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockUserHandlerMockRecorder) UpdateUserRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockUserHandler)(nil).UpdateUserRole))
}
