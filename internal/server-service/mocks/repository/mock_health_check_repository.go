// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\health_check_repository.go
//
// Generated by this command:
//
//	mockgen -source .\repository\health_check_repository.go -destination ./mocks/repository/mock_health_check_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	repository "VCS_SMS_Microservice/internal/server-service/repository"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockHealthCheckRepository is a mock of HealthCheckRepository interface.
type MockHealthCheckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckRepositoryMockRecorder
	isgomock struct{}
}

// MockHealthCheckRepositoryMockRecorder is the mock recorder for MockHealthCheckRepository.
type MockHealthCheckRepositoryMockRecorder struct {
	mock *MockHealthCheckRepository
}

// NewMockHealthCheckRepository creates a new mock instance.
func NewMockHealthCheckRepository(ctrl *gomock.Controller) *MockHealthCheckRepository {
	mock := &MockHealthCheckRepository{ctrl: ctrl}
	mock.recorder = &MockHealthCheckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckRepository) EXPECT() *MockHealthCheckRepositoryMockRecorder {
	return m.recorder
}

// GetAllServersHealthInformation mocks base method.
func (m *MockHealthCheckRepository) GetAllServersHealthInformation(ctx context.Context, startTime, endTime time.Time) (repository.ServersHealthInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServersHealthInformation", ctx, startTime, endTime)
	ret0, _ := ret[0].(repository.ServersHealthInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServersHealthInformation indicates an expected call of GetAllServersHealthInformation.
func (mr *MockHealthCheckRepositoryMockRecorder) GetAllServersHealthInformation(ctx, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServersHealthInformation", reflect.TypeOf((*MockHealthCheckRepository)(nil).GetAllServersHealthInformation), ctx, startTime, endTime)
}

// GetServerUptimePercentage mocks base method.
func (m *MockHealthCheckRepository) GetServerUptimePercentage(ctx context.Context, serverID string, startTime, endTime time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerUptimePercentage", ctx, serverID, startTime, endTime)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerUptimePercentage indicates an expected call of GetServerUptimePercentage.
func (mr *MockHealthCheckRepositoryMockRecorder) GetServerUptimePercentage(ctx, serverID, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerUptimePercentage", reflect.TypeOf((*MockHealthCheckRepository)(nil).GetServerUptimePercentage), ctx, serverID, startTime, endTime)
}
