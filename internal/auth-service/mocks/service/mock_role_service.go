// Code generated by MockGen. DO NOT EDIT.
// Source: .\role_service.go
//
// Generated by this command:
//
//	mockgen -source .\role_service.go -destination ./mocks/mock_role_service.go
//

// Package mock_service is a generated GoMock package.
package service

import (
	model "VCS_SMS_Microservice/internal/auth-service/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoleService is a mock of RoleService interface.
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
	isgomock struct{}
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService.
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance.
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleService) CreateRole(ctx context.Context, role model.Role) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleServiceMockRecorder) CreateRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleService)(nil).CreateRole), ctx, role)
}

// DeleteRoleByID mocks base method.
func (m *MockRoleService) DeleteRoleByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockRoleServiceMockRecorder) DeleteRoleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockRoleService)(nil).DeleteRoleByID), ctx, id)
}

// GetRoleByID mocks base method.
func (m *MockRoleService) GetRoleByID(ctx context.Context, id string) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleServiceMockRecorder) GetRoleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleService)(nil).GetRoleByID), ctx, id)
}

// GetRoleListByIDs mocks base method.
func (m *MockRoleService) GetRoleListByIDs(ctx context.Context, ids []string) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleListByIDs", ctx, ids)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleListByIDs indicates an expected call of GetRoleListByIDs.
func (mr *MockRoleServiceMockRecorder) GetRoleListByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleListByIDs", reflect.TypeOf((*MockRoleService)(nil).GetRoleListByIDs), ctx, ids)
}

// GetRoles mocks base method.
func (m *MockRoleService) GetRoles(ctx context.Context, roleName, sortBy, sortOrder string, limit, offset int) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, roleName, sortBy, sortOrder, limit, offset)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRoleServiceMockRecorder) GetRoles(ctx, roleName, sortBy, sortOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleService)(nil).GetRoles), ctx, roleName, sortBy, sortOrder, limit, offset)
}

// UpdateRoleByID mocks base method.
func (m *MockRoleService) UpdateRoleByID(ctx context.Context, role model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleByID", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleByID indicates an expected call of UpdateRoleByID.
func (mr *MockRoleServiceMockRecorder) UpdateRoleByID(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleByID", reflect.TypeOf((*MockRoleService)(nil).UpdateRoleByID), ctx, role)
}
