// Code generated by MockGen. DO NOT EDIT.
// Source: .\sender.go
//
// Generated by this command:
//
//	mockgen -source .\sender.go -destination ./mock_sender.go
//

// Package mock_mail is a generated GoMock package.
package mail

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	mail0 "gopkg.in/mail.v2"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
	isgomock struct{}
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockSender) SendMail(to []string, subject, htmlBody, textBody string, attachments []Attachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", to, subject, htmlBody, textBody, attachments)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockSenderMockRecorder) SendMail(to, subject, htmlBody, textBody, attachments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockSender)(nil).SendMail), to, subject, htmlBody, textBody, attachments)
}

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
	isgomock struct{}
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m_2 *MockDialer) DialAndSend(m ...*mail0.Message) error {
	m_2.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockDialerMockRecorder) DialAndSend(m ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockDialer)(nil).DialAndSend), m...)
}
