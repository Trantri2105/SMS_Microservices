// Code generated by MockGen. DO NOT EDIT.
// Source: .\api\handler\auth_handler.go
//
// Generated by this command:
//
//	mockgen -source .\api\handler\auth_handler.go -destination ./mocks/api/handler/mock_auth_handler.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
	isgomock struct{}
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthHandler) Login() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthHandlerMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthHandler)(nil).Login))
}

// Logout mocks base method.
func (m *MockAuthHandler) Logout() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthHandlerMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthHandler)(nil).Logout))
}

// Refresh mocks base method.
func (m *MockAuthHandler) Refresh() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthHandlerMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthHandler)(nil).Refresh))
}

// Register mocks base method.
func (m *MockAuthHandler) Register() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthHandlerMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthHandler)(nil).Register))
}

// VerifyToken mocks base method.
func (m *MockAuthHandler) VerifyToken() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthHandlerMockRecorder) VerifyToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthHandler)(nil).VerifyToken))
}
