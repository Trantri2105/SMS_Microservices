// Code generated by MockGen. DO NOT EDIT.
// Source: .\api\handler\role_handler.go
//
// Generated by this command:
//
//	mockgen -source .\api\handler\role_handler.go -destination ./mocks/api/handler/mock_role_handler.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleHandler is a mock of RoleHandler interface.
type MockRoleHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRoleHandlerMockRecorder
	isgomock struct{}
}

// MockRoleHandlerMockRecorder is the mock recorder for MockRoleHandler.
type MockRoleHandlerMockRecorder struct {
	mock *MockRoleHandler
}

// NewMockRoleHandler creates a new mock instance.
func NewMockRoleHandler(ctrl *gomock.Controller) *MockRoleHandler {
	mock := &MockRoleHandler{ctrl: ctrl}
	mock.recorder = &MockRoleHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleHandler) EXPECT() *MockRoleHandlerMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleHandler) CreateRole() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleHandlerMockRecorder) CreateRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleHandler)(nil).CreateRole))
}

// DeleteRole mocks base method.
func (m *MockRoleHandler) DeleteRole() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleHandlerMockRecorder) DeleteRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleHandler)(nil).DeleteRole))
}

// GetRoleByID mocks base method.
func (m *MockRoleHandler) GetRoleByID() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleHandlerMockRecorder) GetRoleByID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleHandler)(nil).GetRoleByID))
}

// GetRoles mocks base method.
func (m *MockRoleHandler) GetRoles() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRoleHandlerMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleHandler)(nil).GetRoles))
}

// UpdateRole mocks base method.
func (m *MockRoleHandler) UpdateRole() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleHandlerMockRecorder) UpdateRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleHandler)(nil).UpdateRole))
}
