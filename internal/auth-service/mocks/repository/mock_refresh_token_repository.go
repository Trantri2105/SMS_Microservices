// Code generated by MockGen. DO NOT EDIT.
// Source: .\refresh_token_repository.go
//
// Generated by this command:
//
//	mockgen -source .\refresh_token_repository.go -destination ./mocks/mock_refresh_token_repository.go
//

// Package mock_repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshToken(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshToken), ctx, userID)
}

// GetRefreshTokenID mocks base method.
func (m *MockRefreshTokenRepository) GetRefreshTokenID(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenID indicates an expected call of GetRefreshTokenID.
func (mr *MockRefreshTokenRepositoryMockRecorder) GetRefreshTokenID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenID", reflect.TypeOf((*MockRefreshTokenRepository)(nil).GetRefreshTokenID), ctx, userID)
}

// SetRefreshTokenID mocks base method.
func (m *MockRefreshTokenRepository) SetRefreshTokenID(ctx context.Context, userID, refreshTokenID string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefreshTokenID", ctx, userID, refreshTokenID, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRefreshTokenID indicates an expected call of SetRefreshTokenID.
func (mr *MockRefreshTokenRepositoryMockRecorder) SetRefreshTokenID(ctx, userID, refreshTokenID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshTokenID", reflect.TypeOf((*MockRefreshTokenRepository)(nil).SetRefreshTokenID), ctx, userID, refreshTokenID, ttl)
}
