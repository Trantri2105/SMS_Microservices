// Code generated by MockGen. DO NOT EDIT.
// Source: .\role_repository.go
//
// Generated by this command:
//
//	mockgen -source .\role_repository.go -destination ./mocks/mock_role_repository.go
//

// Package mock_repository is a generated GoMock package.
package repository

import (
	model "VCS_SMS_Microservice/internal/auth-service/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleRepository) CreateRole(ctx context.Context, role model.Role) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleRepositoryMockRecorder) CreateRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepository)(nil).CreateRole), ctx, role)
}

// DeleteRoleByID mocks base method.
func (m *MockRoleRepository) DeleteRoleByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockRoleRepositoryMockRecorder) DeleteRoleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockRoleRepository)(nil).DeleteRoleByID), ctx, id)
}

// GetRoleByID mocks base method.
func (m *MockRoleRepository) GetRoleByID(ctx context.Context, id string) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleRepositoryMockRecorder) GetRoleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleRepository)(nil).GetRoleByID), ctx, id)
}

// GetRoles mocks base method.
func (m *MockRoleRepository) GetRoles(ctx context.Context, roleName, sortBy, sortOrder string, limit, offset int) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, roleName, sortBy, sortOrder, limit, offset)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRoleRepositoryMockRecorder) GetRoles(ctx, roleName, sortBy, sortOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleRepository)(nil).GetRoles), ctx, roleName, sortBy, sortOrder, limit, offset)
}

// GetRolesListByIDs mocks base method.
func (m *MockRoleRepository) GetRolesListByIDs(ctx context.Context, ids []string) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesListByIDs", ctx, ids)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesListByIDs indicates an expected call of GetRolesListByIDs.
func (mr *MockRoleRepositoryMockRecorder) GetRolesListByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesListByIDs", reflect.TypeOf((*MockRoleRepository)(nil).GetRolesListByIDs), ctx, ids)
}

// UpdateRoleByID mocks base method.
func (m *MockRoleRepository) UpdateRoleByID(ctx context.Context, role model.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleByID", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleByID indicates an expected call of UpdateRoleByID.
func (mr *MockRoleRepositoryMockRecorder) UpdateRoleByID(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleByID", reflect.TypeOf((*MockRoleRepository)(nil).UpdateRoleByID), ctx, role)
}
