openapi: 3.1.0

info:
  title: Auth Service API
  version: 1.0.0

servers:
  - url: http://localhost:8001
    description: Development auth server

tags:
  - name: Auth
    description: Authentication and authorization
  - name: Users
    description: Users management operations
  - name: Scopes
    description: Scopes management operations
  - name: Roles
    description: Roles management operations

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        400:
          description: Invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        409:
          description: User already exist (duplicate email)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate and get access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          headers:
            Set-Cookie:
              description: Http only cookies contains refresh token
              schema:
                type: string
        401:
          description: Authentication failed (incorrect password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: User not found (wrong email)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid input format (malformed request body)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /auth/logout:
    post:
      summary: Logout current sessions
      tags:
        - Auth
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Logout successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          headers:
            Set-Cookie:
              description: Server send this cookies to remove current cookies.
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: "Refresh Access Token"
      security: []
      responses:
        200:
          description: Access token refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          headers:
            Set-Cookie:
              description: Http only cookies contains refresh token
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /users/me/password:
    put:
      summary: Change current user password
      description: |
        Change the authenticated user's password. Requires current password for verification.
        The user ID is extracted from the JWT access token.
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid input format or current password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: User not found (token may contain invalid user ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /roles:
    post:
      summary: Create new role
      tags:
        - "Roles"
      security:
        - bearerAuth: [ "role:create" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
              required:
                - name
                - scopes
      responses:
        201:
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleInfoResponse'
        400:
          description: Invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        409:
          description: Role already exist (duplicate name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    get:
      summary: Get list of roles
      tags:
        - "Roles"
      security:
        - bearerAuth: [ "role:read" ]
      parameters:
        - name: role_name
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [ role_name, created_at ]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
      responses:
        200:
          description: Successfully retrieved server list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleInfoResponse'
        400:
          description: Invalid query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /roles/{roleId}:
    patch:
      tags:
        - "Roles"
      summary: Update role
      security:
        - bearerAuth: [ "role:update" ]
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
              required:
                - name
                - scopes
      responses:
        200:
          description: Role update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleInfoResponse'
        400:
          description: Invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        409:
          description: Role already exist (duplicate name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      tags:
        - "Roles"
      summary: Delete role
      security:
        - bearerAuth: [ "role:delete" ]
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Role delete successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Response:
      type: object
      properties:
        message:
          type: string
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          required: true
        password:
          type: string
          format: password
          required: true
        first_name:
          type: string
          required: true
        last_name:
          type: string
          required: true
    UserInfoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        roles:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required: true
      properties:
        email:
          type: string
          format: email
          required: true
        password:
          type: string
          required: true
          format: password
    AuthenticationResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        token_type:
          type: string
          description: Type of token
          example: Bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        roles:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
    ChangePasswordRequest:
      type: object
      properties:
        current_password:
          type: string
          format: password
          required: true
        new_password:
          type: string
          format: password
          required: true
    RoleRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        scopes:
          type: array
          items:
            type: string
    RoleInfoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        scopes:
          type: array
          items:
            type: string