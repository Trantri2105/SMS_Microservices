// Code generated by MockGen. DO NOT EDIT.
// Source: .\scope_service.go
//
// Generated by this command:
//
//	mockgen -source .\scope_service.go -destination ./mocks/mock_scope_service.go
//

// Package mock_service is a generated GoMock package.
package service

import (
	model "VCS_SMS_Microservice/internal/auth-service/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScopeService is a mock of ScopeService interface.
type MockScopeService struct {
	ctrl     *gomock.Controller
	recorder *MockScopeServiceMockRecorder
	isgomock struct{}
}

// MockScopeServiceMockRecorder is the mock recorder for MockScopeService.
type MockScopeServiceMockRecorder struct {
	mock *MockScopeService
}

// NewMockScopeService creates a new mock instance.
func NewMockScopeService(ctrl *gomock.Controller) *MockScopeService {
	mock := &MockScopeService{ctrl: ctrl}
	mock.recorder = &MockScopeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeService) EXPECT() *MockScopeServiceMockRecorder {
	return m.recorder
}

// GetScopesByIDs mocks base method.
func (m *MockScopeService) GetScopesByIDs(ctx context.Context, ids []string) ([]model.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopesByIDs", ctx, ids)
	ret0, _ := ret[0].([]model.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopesByIDs indicates an expected call of GetScopesByIDs.
func (mr *MockScopeServiceMockRecorder) GetScopesByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopesByIDs", reflect.TypeOf((*MockScopeService)(nil).GetScopesByIDs), ctx, ids)
}

// GetScopesList mocks base method.
func (m *MockScopeService) GetScopesList(ctx context.Context, scopeName, sortBy, sortOrder string, limit, offset int) ([]model.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopesList", ctx, scopeName, sortBy, sortOrder, limit, offset)
	ret0, _ := ret[0].([]model.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopesList indicates an expected call of GetScopesList.
func (mr *MockScopeServiceMockRecorder) GetScopesList(ctx, scopeName, sortBy, sortOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopesList", reflect.TypeOf((*MockScopeService)(nil).GetScopesList), ctx, scopeName, sortBy, sortOrder, limit, offset)
}
